# Project Euler
# Problem 8: https://projecteuler.net/problem=8

# "The four adjacent digits in the 1000-digit number that have the greatest product are 9 x 9 x 8 x 9 = 5832.

# 73167176531330624919225119674426574742355349194934
# 96983520312774506326239578318016984801869478851843
# 85861560789112949495459501737958331952853208805511
# 12540698747158523863050715693290963295227443043557
# 66896648950445244523161731856403098711121722383113
# 62229893423380308135336276614282806444486645238749
# 30358907296290491560440772390713810515859307960866
# 70172427121883998797908792274921901699720888093776
# 65727333001053367881220235421809751254540594752243
# 52584907711670556013604839586446706324415722155397
# 53697817977846174064955149290862569321978468622482
# 83972241375657056057490261407972968652414535100474
# 82166370484403199890008895243450658541227588666881
# 16427171479924442928230863465674813919123162824586
# 17866458359124566529476545682848912883142607690042
# 24219022671055626321111109370544217506941658960408
# 07198403850962455444362981230987879927244284909188
# 84580156166097919133875499200524063689912560717606
# 05886116467109405077541002256983155200055935729725
# 71636269561882670428252483600823257530420752963450

# Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?"



# We know the 4 largest digits in a row will produce the largest product eg: 9999
# So instead of iterating through every possible 4 digit number and multiplying them together
# Lets look for the largest 4 digit number within the input_num(9989),
# then multiple their digits for the product to reproduce the given solution above

input_num = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450


def largest_number(input_num):
    largest_num = 9999  ## for 4 digits
   # largest_num = 9999999999999 ## for 13 digits


    for i in range(1, largest_num + 1):
        is_num_found = str(input_num).find(str(largest_num))

        #print(largest_num) #This print will significantly increase execution time for 13 digits
        if is_num_found >= 0:
            return largest_num

        largest_num -= 1


    #print(input_num_str, is_found)


def num_product(number):
    num_list = list(str(number))
    print(num_list)
    #print(number)

    product = int(num_list[0])
    for i in range(1, len(num_list)):
        next_num = int(num_list[i])
        print(f"{product} X {next_num}")
        product *= next_num
        #print(product)
    return product


largest_num = largest_number(input_num)
print(num_product(largest_num))

#### FAILURE #####
# While this script does work to find the noted solution for 4 digits it does not for 13
# A few issues for this script:
#
# ONE: It is very time consuming wthe line 47 commented out it takes ~1 day to run
# With it uncommented it takes multiple days to run
#
# TWO: for 4 digits it's lucky that that first match in our input_number..., one doesn't contain any zeroes...
# but two is comprised of all large numbers. eg: if 9990 existed in our input_num, we would have found it and gotten a product of 0
# where the smaller number 9989 produces a larger product 
#
# Example output for 13 digits:
# ['9', '9', '8', '9', '0', '0', '0', '8', '8', '9', '5', '2', '4']
# 9 X 9
# 81 X 8
# 648 X 9
# 5832 X 0
# 0 X 0
# 0 X 0
# 0 X 8
# 0 X 8
# 0 X 9
# 0 X 5
# 0 X 2
# 0 X 4
# 0

# With the above comments in mind I set out to write V2 of the script
