# Project Euler
# Problem 8: Largest Product in a Series
# https://projecteuler.net/problem=8

# The four adjacent digits in the 1000-digit number that have the greatest product are 9 x 9 x 8 x 9 = 5832.
#
# 73167176531330624919225119674426574742355349194934
# 96983520312774506326239578318016984801869478851843
# 85861560789112949495459501737958331952853208805511
# 12540698747158523863050715693290963295227443043557
# 66896648950445244523161731856403098711121722383113
# 62229893423380308135336276614282806444486645238749
# 30358907296290491560440772390713810515859307960866
# 70172427121883998797908792274921901699720888093776
# 65727333001053367881220235421809751254540594752243
# 52584907711670556013604839586446706324415722155397
# 53697817977846174064955149290862569321978468622482
# 83972241375657056057490261407972968652414535100474
# 82166370484403199890008895243450658541227588666881
# 16427171479924442928230863465674813919123162824586
# 17866458359124566529476545682848912883142607690042
# 24219022671055626321111109370544217506941658960408
# 07198403850962455444362981230987879927244284909188
# 84580156166097919133875499200524063689912560717606
# 05886116467109405077541002256983155200055935729725
# 71636269561882670428252483600823257530420752963450
#
# Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?


# From V1 of this script we know our "largest_num" cant contain any 0's or else the product will be 0
# Also any digits of 1 will not grow the product output so we'll want to filter that out two.
# Then 3, 4, 5 one by one until we have 1 number and then find it's product

input_num = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450


def largest_number(input_num):

    # Build list of each individual digt of 1000 digit input number
    list = []
    for num in str(input_num):
        list.append(num)

    # Iterate through the above list and create every 13 digit number possible..
    # based on adjancent numbers left to right and store it in a new list
    thirteen_digit_list = []
    while len(list) > 12:
        #print(len(list))
        my_num = ""
        for i in range(0, 13):
            my_num += list[i]
            #print(my_num)

        thirteen_digit_list.append(my_num)
        list.pop(0)

    # Filter out my thirteen digit number list to remove numbers with 0s, 1s,
    # and smaller numbers overall until I have 1 number remaining that has the most large numbers like 9, 8, 7
    filtered_list = []
#    print(len(thirteen_digit_list))
    substring_zero = "0"
    substring_one = "1"
    substring_two = "2"
    substring_three = "3"
    for str_num in thirteen_digit_list:
#        print(str_num)
        if substring_zero not in str_num and substring_one not in str_num and substring_two not in str_num and substring_three not in str_num:
            filtered_list.append(str_num)

    #print(filtered_list)

    return int(filtered_list[0])

def num_product(number):
    num_list = list(str(number))
#    print(num_list)
#    print(number)

    product = int(num_list[0])
    for i in range(1, len(num_list)):
        next_num = int(num_list[i])
        print(f"{product} X {next_num}")
        product *= next_num
        #print(product)
    return product



largest_num = largest_number(input_num)
largest_num_product = num_product(largest_num)
print(f"The number that produces the largest product is {largest_num} and it's product is {largest_num_product}")


########## Example Output ##########
# 5 X 5
# 25 X 7
# 175 X 6
# 1050 X 6
# 6300 X 8
# 50400 X 9
# 453600 X 6
# 2721600 X 6
# 16329600 X 4
# 65318400 X 8
# 522547200 X 9
# 4702924800 X 5
# The number that produces the largest product is 5576689664895 and it's product is 23514624000
